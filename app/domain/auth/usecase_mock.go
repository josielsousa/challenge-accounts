// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"github.com/josielsousa/challenge-accounts/types"
	"sync"
)

// Ensure, that SignerMock does implement Signer.
// If this is not the case, regenerate this file with moq.
var _ Signer = &SignerMock{}

// SignerMock is a mock implementation of Signer.
//
//	func TestSomethingThatUsesSigner(t *testing.T) {
//
//		// make and configure a mocked Signer
//		mockedSigner := &SignerMock{
//			SignTokenFunc: func(id string, username string) (types.Auth, error) {
//				panic("mock out the SignToken method")
//			},
//		}
//
//		// use mockedSigner in code that requires Signer
//		// and then make assertions.
//
//	}
type SignerMock struct {
	// SignTokenFunc mocks the SignToken method.
	SignTokenFunc func(id string, username string) (types.Auth, error)

	// calls tracks calls to the methods.
	calls struct {
		// SignToken holds details about calls to the SignToken method.
		SignToken []struct {
			// ID is the id argument value.
			ID string
			// Username is the username argument value.
			Username string
		}
	}
	lockSignToken sync.RWMutex
}

// SignToken calls SignTokenFunc.
func (mock *SignerMock) SignToken(id string, username string) (types.Auth, error) {
	if mock.SignTokenFunc == nil {
		panic("SignerMock.SignTokenFunc: method is nil but Signer.SignToken was just called")
	}
	callInfo := struct {
		ID       string
		Username string
	}{
		ID:       id,
		Username: username,
	}
	mock.lockSignToken.Lock()
	mock.calls.SignToken = append(mock.calls.SignToken, callInfo)
	mock.lockSignToken.Unlock()
	return mock.SignTokenFunc(id, username)
}

// SignTokenCalls gets all the calls that were made to SignToken.
// Check the length with:
//
//	len(mockedSigner.SignTokenCalls())
func (mock *SignerMock) SignTokenCalls() []struct {
	ID       string
	Username string
} {
	var calls []struct {
		ID       string
		Username string
	}
	mock.lockSignToken.RLock()
	calls = mock.calls.SignToken
	mock.lockSignToken.RUnlock()
	return calls
}

// Ensure, that HasherMock does implement Hasher.
// If this is not the case, regenerate this file with moq.
var _ Hasher = &HasherMock{}

// HasherMock is a mock implementation of Hasher.
//
//	func TestSomethingThatUsesHasher(t *testing.T) {
//
//		// make and configure a mocked Hasher
//		mockedHasher := &HasherMock{
//			VerifySecretFunc: func(hashedSecret string, secret string) error {
//				panic("mock out the VerifySecret method")
//			},
//		}
//
//		// use mockedHasher in code that requires Hasher
//		// and then make assertions.
//
//	}
type HasherMock struct {
	// VerifySecretFunc mocks the VerifySecret method.
	VerifySecretFunc func(hashedSecret string, secret string) error

	// calls tracks calls to the methods.
	calls struct {
		// VerifySecret holds details about calls to the VerifySecret method.
		VerifySecret []struct {
			// HashedSecret is the hashedSecret argument value.
			HashedSecret string
			// Secret is the secret argument value.
			Secret string
		}
	}
	lockVerifySecret sync.RWMutex
}

// VerifySecret calls VerifySecretFunc.
func (mock *HasherMock) VerifySecret(hashedSecret string, secret string) error {
	if mock.VerifySecretFunc == nil {
		panic("HasherMock.VerifySecretFunc: method is nil but Hasher.VerifySecret was just called")
	}
	callInfo := struct {
		HashedSecret string
		Secret       string
	}{
		HashedSecret: hashedSecret,
		Secret:       secret,
	}
	mock.lockVerifySecret.Lock()
	mock.calls.VerifySecret = append(mock.calls.VerifySecret, callInfo)
	mock.lockVerifySecret.Unlock()
	return mock.VerifySecretFunc(hashedSecret, secret)
}

// VerifySecretCalls gets all the calls that were made to VerifySecret.
// Check the length with:
//
//	len(mockedHasher.VerifySecretCalls())
func (mock *HasherMock) VerifySecretCalls() []struct {
	HashedSecret string
	Secret       string
} {
	var calls []struct {
		HashedSecret string
		Secret       string
	}
	mock.lockVerifySecret.RLock()
	calls = mock.calls.VerifySecret
	mock.lockVerifySecret.RUnlock()
	return calls
}
