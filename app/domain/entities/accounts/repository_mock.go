// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package accounts

import (
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			GetAccountByCPFFunc: func(cpf string) (Account, error) {
// 				panic("mock out the GetAccountByCPF method")
// 			},
// 			GetByIDFunc: func(id string) (Account, error) {
// 				panic("mock out the GetByID method")
// 			},
// 			InsertFunc: func(account Account) error {
// 				panic("mock out the Insert method")
// 			},
// 			ListAccountsFunc: func() ([]Account, error) {
// 				panic("mock out the ListAccounts method")
// 			},
// 			UpdateFunc: func(account Account) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// GetAccountByCPFFunc mocks the GetAccountByCPF method.
	GetAccountByCPFFunc func(cpf string) (Account, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id string) (Account, error)

	// InsertFunc mocks the Insert method.
	InsertFunc func(account Account) error

	// ListAccountsFunc mocks the ListAccounts method.
	ListAccountsFunc func() ([]Account, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(account Account) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAccountByCPF holds details about calls to the GetAccountByCPF method.
		GetAccountByCPF []struct {
			// Cpf is the cpf argument value.
			Cpf string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID string
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Account is the account argument value.
			Account Account
		}
		// ListAccounts holds details about calls to the ListAccounts method.
		ListAccounts []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Account is the account argument value.
			Account Account
		}
	}
	lockGetAccountByCPF sync.RWMutex
	lockGetByID         sync.RWMutex
	lockInsert          sync.RWMutex
	lockListAccounts    sync.RWMutex
	lockUpdate          sync.RWMutex
}

// GetAccountByCPF calls GetAccountByCPFFunc.
func (mock *RepositoryMock) GetAccountByCPF(cpf string) (Account, error) {
	if mock.GetAccountByCPFFunc == nil {
		panic("RepositoryMock.GetAccountByCPFFunc: method is nil but Repository.GetAccountByCPF was just called")
	}
	callInfo := struct {
		Cpf string
	}{
		Cpf: cpf,
	}
	mock.lockGetAccountByCPF.Lock()
	mock.calls.GetAccountByCPF = append(mock.calls.GetAccountByCPF, callInfo)
	mock.lockGetAccountByCPF.Unlock()
	return mock.GetAccountByCPFFunc(cpf)
}

// GetAccountByCPFCalls gets all the calls that were made to GetAccountByCPF.
// Check the length with:
//     len(mockedRepository.GetAccountByCPFCalls())
func (mock *RepositoryMock) GetAccountByCPFCalls() []struct {
	Cpf string
} {
	var calls []struct {
		Cpf string
	}
	mock.lockGetAccountByCPF.RLock()
	calls = mock.calls.GetAccountByCPF
	mock.lockGetAccountByCPF.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryMock) GetByID(id string) (Account, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositoryMock.GetByIDFunc: method is nil but Repository.GetByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedRepository.GetByIDCalls())
func (mock *RepositoryMock) GetByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *RepositoryMock) Insert(account Account) error {
	if mock.InsertFunc == nil {
		panic("RepositoryMock.InsertFunc: method is nil but Repository.Insert was just called")
	}
	callInfo := struct {
		Account Account
	}{
		Account: account,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(account)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedRepository.InsertCalls())
func (mock *RepositoryMock) InsertCalls() []struct {
	Account Account
} {
	var calls []struct {
		Account Account
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}

// ListAccounts calls ListAccountsFunc.
func (mock *RepositoryMock) ListAccounts() ([]Account, error) {
	if mock.ListAccountsFunc == nil {
		panic("RepositoryMock.ListAccountsFunc: method is nil but Repository.ListAccounts was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListAccounts.Lock()
	mock.calls.ListAccounts = append(mock.calls.ListAccounts, callInfo)
	mock.lockListAccounts.Unlock()
	return mock.ListAccountsFunc()
}

// ListAccountsCalls gets all the calls that were made to ListAccounts.
// Check the length with:
//     len(mockedRepository.ListAccountsCalls())
func (mock *RepositoryMock) ListAccountsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListAccounts.RLock()
	calls = mock.calls.ListAccounts
	mock.lockListAccounts.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock) Update(account Account) error {
	if mock.UpdateFunc == nil {
		panic("RepositoryMock.UpdateFunc: method is nil but Repository.Update was just called")
	}
	callInfo := struct {
		Account Account
	}{
		Account: account,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(account)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock) UpdateCalls() []struct {
	Account Account
} {
	var calls []struct {
		Account Account
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
