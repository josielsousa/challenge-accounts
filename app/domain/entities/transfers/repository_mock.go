// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package transfers

import (
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			InsertFunc: func(transfer Transfer) error {
// 				panic("mock out the Insert method")
// 			},
// 			ListTransfersFunc: func(accountID string) ([]Transfer, error) {
// 				panic("mock out the ListTransfers method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// InsertFunc mocks the Insert method.
	InsertFunc func(transfer Transfer) error

	// ListTransfersFunc mocks the ListTransfers method.
	ListTransfersFunc func(accountID string) ([]Transfer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Transfer is the transfer argument value.
			Transfer Transfer
		}
		// ListTransfers holds details about calls to the ListTransfers method.
		ListTransfers []struct {
			// AccountID is the accountID argument value.
			AccountID string
		}
	}
	lockInsert        sync.RWMutex
	lockListTransfers sync.RWMutex
}

// Insert calls InsertFunc.
func (mock *RepositoryMock) Insert(transfer Transfer) error {
	if mock.InsertFunc == nil {
		panic("RepositoryMock.InsertFunc: method is nil but Repository.Insert was just called")
	}
	callInfo := struct {
		Transfer Transfer
	}{
		Transfer: transfer,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(transfer)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedRepository.InsertCalls())
func (mock *RepositoryMock) InsertCalls() []struct {
	Transfer Transfer
} {
	var calls []struct {
		Transfer Transfer
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}

// ListTransfers calls ListTransfersFunc.
func (mock *RepositoryMock) ListTransfers(accountID string) ([]Transfer, error) {
	if mock.ListTransfersFunc == nil {
		panic("RepositoryMock.ListTransfersFunc: method is nil but Repository.ListTransfers was just called")
	}
	callInfo := struct {
		AccountID string
	}{
		AccountID: accountID,
	}
	mock.lockListTransfers.Lock()
	mock.calls.ListTransfers = append(mock.calls.ListTransfers, callInfo)
	mock.lockListTransfers.Unlock()
	return mock.ListTransfersFunc(accountID)
}

// ListTransfersCalls gets all the calls that were made to ListTransfers.
// Check the length with:
//     len(mockedRepository.ListTransfersCalls())
func (mock *RepositoryMock) ListTransfersCalls() []struct {
	AccountID string
} {
	var calls []struct {
		AccountID string
	}
	mock.lockListTransfers.RLock()
	calls = mock.calls.ListTransfers
	mock.lockListTransfers.RUnlock()
	return calls
}
