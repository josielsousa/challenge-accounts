// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package transfers

import (
	"context"
	accE "github.com/josielsousa/challenge-accounts/app/domain/entities/accounts"
	trfE "github.com/josielsousa/challenge-accounts/app/domain/entities/transfers"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			InsertFunc: func(ctx context.Context, transfer trfE.TransferData) error {
//				panic("mock out the Insert method")
//			},
//			ListTransfersFunc: func(ctx context.Context, accOriginID string) ([]trfE.Transfer, error) {
//				panic("mock out the ListTransfers method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// InsertFunc mocks the Insert method.
	InsertFunc func(ctx context.Context, transfer trfE.TransferData) error

	// ListTransfersFunc mocks the ListTransfers method.
	ListTransfersFunc func(ctx context.Context, accOriginID string) ([]trfE.Transfer, error)

	// calls tracks calls to the methods.
	calls struct {
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transfer is the transfer argument value.
			Transfer trfE.TransferData
		}
		// ListTransfers holds details about calls to the ListTransfers method.
		ListTransfers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccOriginID is the accOriginID argument value.
			AccOriginID string
		}
	}
	lockInsert        sync.RWMutex
	lockListTransfers sync.RWMutex
}

// Insert calls InsertFunc.
func (mock *RepositoryMock) Insert(ctx context.Context, transfer trfE.TransferData) error {
	if mock.InsertFunc == nil {
		panic("RepositoryMock.InsertFunc: method is nil but Repository.Insert was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Transfer trfE.TransferData
	}{
		Ctx:      ctx,
		Transfer: transfer,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(ctx, transfer)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedRepository.InsertCalls())
func (mock *RepositoryMock) InsertCalls() []struct {
	Ctx      context.Context
	Transfer trfE.TransferData
} {
	var calls []struct {
		Ctx      context.Context
		Transfer trfE.TransferData
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}

// ListTransfers calls ListTransfersFunc.
func (mock *RepositoryMock) ListTransfers(ctx context.Context, accOriginID string) ([]trfE.Transfer, error) {
	if mock.ListTransfersFunc == nil {
		panic("RepositoryMock.ListTransfersFunc: method is nil but Repository.ListTransfers was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccOriginID string
	}{
		Ctx:         ctx,
		AccOriginID: accOriginID,
	}
	mock.lockListTransfers.Lock()
	mock.calls.ListTransfers = append(mock.calls.ListTransfers, callInfo)
	mock.lockListTransfers.Unlock()
	return mock.ListTransfersFunc(ctx, accOriginID)
}

// ListTransfersCalls gets all the calls that were made to ListTransfers.
// Check the length with:
//
//	len(mockedRepository.ListTransfersCalls())
func (mock *RepositoryMock) ListTransfersCalls() []struct {
	Ctx         context.Context
	AccOriginID string
} {
	var calls []struct {
		Ctx         context.Context
		AccOriginID string
	}
	mock.lockListTransfers.RLock()
	calls = mock.calls.ListTransfers
	mock.lockListTransfers.RUnlock()
	return calls
}

// Ensure, that AccountRepositoryMock does implement AccountRepository.
// If this is not the case, regenerate this file with moq.
var _ AccountRepository = &AccountRepositoryMock{}

// AccountRepositoryMock is a mock implementation of AccountRepository.
//
//	func TestSomethingThatUsesAccountRepository(t *testing.T) {
//
//		// make and configure a mocked AccountRepository
//		mockedAccountRepository := &AccountRepositoryMock{
//			GetByIDFunc: func(ctx context.Context, id string) (accE.Account, error) {
//				panic("mock out the GetByID method")
//			},
//		}
//
//		// use mockedAccountRepository in code that requires AccountRepository
//		// and then make assertions.
//
//	}
type AccountRepositoryMock struct {
	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id string) (accE.Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
	}
	lockGetByID sync.RWMutex
}

// GetByID calls GetByIDFunc.
func (mock *AccountRepositoryMock) GetByID(ctx context.Context, id string) (accE.Account, error) {
	if mock.GetByIDFunc == nil {
		panic("AccountRepositoryMock.GetByIDFunc: method is nil but AccountRepository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedAccountRepository.GetByIDCalls())
func (mock *AccountRepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}
