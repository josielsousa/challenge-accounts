// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package jwt

import (
	"sync"
	"time"
)

// Ensure, that ClockerMock does implement Clocker.
// If this is not the case, regenerate this file with moq.
var _ Clocker = &ClockerMock{}

// ClockerMock is a mock implementation of Clocker.
//
//	func TestSomethingThatUsesClocker(t *testing.T) {
//
//		// make and configure a mocked Clocker
//		mockedClocker := &ClockerMock{
//			NowFunc: func() time.Time {
//				panic("mock out the Now method")
//			},
//			UntilFunc: func(t time.Time) time.Duration {
//				panic("mock out the Until method")
//			},
//		}
//
//		// use mockedClocker in code that requires Clocker
//		// and then make assertions.
//
//	}
type ClockerMock struct {
	// NowFunc mocks the Now method.
	NowFunc func() time.Time

	// UntilFunc mocks the Until method.
	UntilFunc func(t time.Time) time.Duration

	// calls tracks calls to the methods.
	calls struct {
		// Now holds details about calls to the Now method.
		Now []struct {
		}
		// Until holds details about calls to the Until method.
		Until []struct {
			// T is the t argument value.
			T time.Time
		}
	}
	lockNow   sync.RWMutex
	lockUntil sync.RWMutex
}

// Now calls NowFunc.
func (mock *ClockerMock) Now() time.Time {
	if mock.NowFunc == nil {
		panic("ClockerMock.NowFunc: method is nil but Clocker.Now was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNow.Lock()
	mock.calls.Now = append(mock.calls.Now, callInfo)
	mock.lockNow.Unlock()
	return mock.NowFunc()
}

// NowCalls gets all the calls that were made to Now.
// Check the length with:
//
//	len(mockedClocker.NowCalls())
func (mock *ClockerMock) NowCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNow.RLock()
	calls = mock.calls.Now
	mock.lockNow.RUnlock()
	return calls
}

// Until calls UntilFunc.
func (mock *ClockerMock) Until(t time.Time) time.Duration {
	if mock.UntilFunc == nil {
		panic("ClockerMock.UntilFunc: method is nil but Clocker.Until was just called")
	}
	callInfo := struct {
		T time.Time
	}{
		T: t,
	}
	mock.lockUntil.Lock()
	mock.calls.Until = append(mock.calls.Until, callInfo)
	mock.lockUntil.Unlock()
	return mock.UntilFunc(t)
}

// UntilCalls gets all the calls that were made to Until.
// Check the length with:
//
//	len(mockedClocker.UntilCalls())
func (mock *ClockerMock) UntilCalls() []struct {
	T time.Time
} {
	var calls []struct {
		T time.Time
	}
	mock.lockUntil.RLock()
	calls = mock.calls.Until
	mock.lockUntil.RUnlock()
	return calls
}
